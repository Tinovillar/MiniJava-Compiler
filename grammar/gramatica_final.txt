####### ELIMINAR RECURSION A IZQUIERDA ########

<Inicial> ::= <ListaClases> eof
<ListaClases> ::= <Clase> <ListaClases> | €
<Clase> ::= <ModificadorOpcional> class idClase <HerenciaOpcional> { <ListaMiembros> }
<ModificadorOpcional> ::= abstract | static | final | €
<HerenciaOpcional> ::= extends idClase | €
<ListaMiembros> ::= <Miembro> <ListaMiembros> | €
<Miembro> ::= <Atributo> | <Metodo> | <Constructor>
<Atributo> ::= <Tipo> idMetVar ;
<Metodo> ::= <ModificadorOpcional> <TipoMetodo> idMetVar <ArgsFormales> <BloqueOpcional>
<Constructor> ::= public idClase <ArgsFormales> <Bloque>
<TipoMetodo> ::= <Tipo> | void
<Tipo> ::= <TipoPrimitivo> | idClase
<TipoPrimitivo> ::= boolean | char | int
<ArgsFormales> ::= ( <ListaArgsFormalesOpcional> )
<ListaArgsFormalesOpcional> ::= <ListaArgsFormales> | €

===> PREGUNTAR <===
-- <ListaArgsFormales> ::= <ArgFormal>
-- <ListaArgsFormales> ::= <ListaArgsFormales> , <ArgFormal>
++ <ListaArgsFormales> ::= <ArgFormal> <ListaArgsFormalesResto>
++ <ListaArgsFormalesResto> ::= , <ArgFormal> <ListaArgsFormalesResto> | €

<ArgFormal> ::= <Tipo> idMetVar
<BloqueOpcional> ::= <Bloque> | €
<Bloque> ::= { <ListaSentencias> }
<ListaSentencias> ::= <Sentencia> <ListaSentencias> | €
<Sentencia> ::= ;
<Sentencia> ::= <Asignacion> ;
<Sentencia> ::= <Llamada> ;
<Sentencia> ::= <VarLocal> ;
<Sentencia> ::= <Return> ;
<Sentencia> ::= <If>
<Sentencia> ::= <While>
<Sentencia> ::= <Bloque>
<Asignacion> ::= <Expresion>
<Llamada> ::= <Expresion>
<VarLocal> ::= var idMetVar = <ExpresionCompuesta>
<Return> ::= return <ExpresionOpcional>
<ExpresionOpcional> ::= <Expresion> | €
<If> ::= if ( <Expresion> ) <Sentencia>
<If> ::= if ( <Expresion> ) <Sentencia> else <Sentencia>
<While> ::= while ( <Expresion> ) <Sentencia>
<Expresion> ::= <ExpresionCompuesta> <OperadorAsignacion> <ExpresionCompuesta>
<Expresion> ::= <ExpresionCompuesta>
<OperadorAsignacion> ::= = | += | -=

===> PREGUNTAR <===
-- <ExpresionCompuesta> ::= <ExpresionBasica>
-- <ExpresionCompuesta> ::= <ExpresionCompuesta> <OperadorBinario> <ExpresionBasica>
++ <ExpresionCompuesta> ::= <ExpresionBasica> <ExpresionCompuestaResto>
++ <ExpresionCompuestaResto> ::= <ExpresionBasica> <OperadorBinario> <ExpresionCompuestaResto> | €

<OperadorBinario> ::= || | && | == | != | < | > | <= | >= | + | - | * | / | %
<ExpresionBasica> ::= <OperadorUnario> <Operando>
<ExpresionBasica> ::= <Operando>
<OperadorUnario> ::= + | ++ | − | −− | !
<Operando> ::= <Primitvo>
<Operando> ::= <Referencia>
<Primitivo> ::= true | false | intLiteral | charLiteral | null

===> PREGUNTAR <===
-- <Referencia> ::= <Primario>
-- <Referencia> ::= <Referencia> <VarEncadenada>
-- <Referencia> ::= <Referencia> <MetodoEncadenado>
++ <Referencia> ::= <Primario> <ReferenciaResto>
++ <ReferenciaResto> ::= <VarEncadenada> <ReferenciaResto> | <MetodoEncadenado> <ReferenciaResto> | €

<Primario> ::= this
<Primario> ::= stringLiteral
<Primario> ::= <AccesoVar>
<Primario> ::= <LlamadaConstructor>
<Primario> ::= <LlamadaMetodo>
<Primario> ::= <LlamadaMetodoEstatico>
<Primario> ::= <ExpresionParentizada>
<AccesoVar> ::= idMetVar
<LlamadaConstructor> ::= new idClase <ArgsActuales>
<ExpresionParentizada> ::= ( <Expresion> )
<LlamadaMetodo> ::= idMetVar <ArgsActuales>
<LlamadaMetodoEstatico> ::= idClase . idMetVar <ArgsActuales>
<ArgsActuales> ::= ( <ListaExpsOpcional> )
<ListaExpsOpcional> ::= <ListaExps> | €
<ListaExps> ::= <Expresion>
<ListaExps> ::= <Expresion> , <ListaExps>
<VarEncadenada> ::= . idMetVar
<MetodoEncadenado> ::= . idMetVar <ArgsActuales>



####### FACTORIZAR A IZQUIERDA ########



<Inicial> ::= <ListaClases> eof
<ListaClases> ::= <Clase> <ListaClases> | €
<Clase> ::= <ModificadorOpcional> class idClase <HerenciaOpcional> { <ListaMiembros> }
<ModificadorOpcional> ::= abstract | static | final | €
<HerenciaOpcional> ::= extends idClase | €
<ListaMiembros> ::= <Miembro> <ListaMiembros> | €

-- <Miembro> ::= <Atributo> | <Metodo> | <Constructor>
-- <Atributo> ::= <Tipo> idMetVar ;
-- <Metodo> ::= <ModificadorOpcional> <TipoMetodo> idMetVar <ArgsFormales> <BloqueOpcional>
++ <Miembro> ::= <Tipo> idMetVar <MetodoVariable> ;
++ <Miembro> ::= <ModificadorMiembro> <TipoMetodo> <DeclaracionMetodo>
++ <Miembro> ::= void idMetVar <DeclaracionMetodo>
++ <ModificadorMiembro> ::= abstract | static | final
++ <MetodoVariable> ::= <DeclaracionMetodo> | <DeclaracionVariable>
++ <DeclaracionVariable> ::= = <ExpresionCompuesta> | €
++ <DeclaracionMetodo> ::= <ArgsFormales> <BloqueOpcional>
++ <Miembro> ::= <Constructor>

<Constructor> ::= public idClase <ArgsFormales> <Bloque>
<TipoMetodo> ::= <Tipo> | void
<Tipo> ::= <TipoPrimitivo> | idClase
<TipoPrimitivo> ::= boolean | char | int
<ArgsFormales> ::= ( <ListaArgsFormalesOpcional> )
<ListaArgsFormalesOpcional> ::= <ListaArgsFormales> | €
<ListaArgsFormales> ::= <ArgFormal> <ListaArgsFormalesResto>
<ListaArgsFormalesResto> ::= , <ArgFormal> <ListaArgsFormalesResto> | €
<ArgFormal> ::= <Tipo> idMetVar
<BloqueOpcional> ::= <Bloque> | ;
<Bloque> ::= { <ListaSentencias> }
<ListaSentencias> ::= <Sentencia> <ListaSentencias> | €

<Sentencia> ::= ;
<Sentencia> ::= <VarLocal> ;
<Sentencia> ::= <Return> ;
<Sentencia> ::= <If>
<Sentencia> ::= <While>
<Sentencia> ::= <Bloque>

-- <Sentencia> ::= <Asignacion> ;
-- <Sentencia> ::= <Llamada> ;
++ <Sentencia> ::= <Expresion> ;
-- <Asignacion> ::= <Expresion>
-- <Llamada> ::= <Expresion>

<VarLocal> ::= var idMetVar = <ExpresionCompuesta>
<Return> ::= return <ExpresionOpcional>
<ExpresionOpcional> ::= <Expresion> | €

-- <If> ::= if ( <Expresion> ) <Sentencia>
-- <If> ::= if ( <Expresion> ) <Sentencia> else <Sentencia>
++ <If> ::= if ( <Expresion> ) <Sentencia> <Else>
++ <Else> ::= else <Sentencia> | €

<While> ::= while ( <Expresion> ) <Sentencia>

===> PREGUNTAR <===
-- <Expresion> ::= <ExpresionCompuesta> <OperadorAsignacion> <ExpresionCompuesta>
-- <Expresion> ::= <ExpresionCompuesta>
++ <Expresion> ::= <ExpresionCompuesta> <ExpresionResto>
++ <ExpresionResto> ::= <OperadorAsignacion> <ExpresionCompuesta> | €

<OperadorAsignacion> ::= =
<ExpresionCompuesta> ::= <ExpresionBasica> <ExpresionCompuestaResto>
<ExpresionCompuestaResto> ::= <ExpresionBasica> <OperadorBinario> <ExpresionCompuestaResto> | €
<OperadorBinario> ::= || | && | == | != | < | > | <= | >= | + | - | * | / | %
<ExpresionBasica> ::= <OperadorUnario> <Operando>
<ExpresionBasica> ::= <Operando>
<OperadorUnario> ::= + | ++ | − | −− | !
<Operando> ::= <Primitvo>
<Operando> ::= <Referencia>
<Primitivo> ::= true | false | intLiteral | charLiteral | null
<Referencia> ::= <Primario> <ReferenciaResto>
<ReferenciaResto> ::= <VarEncadenada> <ReferenciaResto> | <MetodoEncadenado> <ReferenciaResto> | €
<Primario> ::= this
<Primario> ::= stringLiteral
<Primario> ::= <AccesoVar>
<Primario> ::= <LlamadaConstructor>
<Primario> ::= <LlamadaMetodo>
<Primario> ::= <LlamadaMetodoEstatico>
<Primario> ::= <ExpresionParentizada>
<AccesoVar> ::= idMetVar
<LlamadaConstructor> ::= new idClase <ArgsActuales>
<ExpresionParentizada> ::= ( <Expresion> )
<LlamadaMetodo> ::= idMetVar <ArgsActuales>
<LlamadaMetodoEstatico> ::= idClase . idMetVar <ArgsActuales>
<ArgsActuales> ::= ( <ListaExpsOpcional> )
<ListaExpsOpcional> ::= <ListaExps> | €

-- <ListaExps> ::= <Expresion>
-- <ListaExps> ::= <Expresion> , <ListaExps>
++ <ListaExps> ::= <Expresion> <ListaExpsResto>
++ <ListaExpsResto> ::= , <Expresion> <ListaExpsResto> | €

<VarEncadenada> ::= . idMetVar
<MetodoEncadenado> ::= . idMetVar <ArgsActuales>



####### LISTO ########



<Inicial> ::= <ListaClases> eof
<ListaClases> ::= <Clase> <ListaClases> | €
<Clase> ::= <ModificadorOpcional> class idClase <HerenciaOpcional> { <ListaMiembros> }
<ModificadorOpcional> ::= abstract | static | final | €
<HerenciaOpcional> ::= extends idClase | €
<ListaMiembros> ::= <Miembro> <ListaMiembros> | €
<Miembro> ::= <Constructor>
<Miembro> ::= <Tipo> idMetVar <MetodoVariable>
<Miembro> ::= <ModificadorMiembro> <TipoMetodo> <DeclaracionMetodo>
<Miembro> ::= void idMetVar <DeclaracionMetodo>
<ModificadorMiembro> ::= abstract | static | final
<MetodoVariable> ::= <DeclaracionMetodo> | <DeclaracionVariable>
<DeclaracionVariable> ::= = <ExpresionCompuesta> ; | ;
<DeclaracionMetodo> ::= <ArgsFormales> <BloqueOpcional>
<Constructor> ::= public idClase <ArgsFormales> <Bloque>
<TipoMetodo> ::= <Tipo> | void
<Tipo> ::= <TipoPrimitivo> | idClase
<TipoPrimitivo> ::= boolean | char | int
<ArgsFormales> ::= ( <ListaArgsFormalesOpcional> )
<ListaArgsFormalesOpcional> ::= <ListaArgsFormales> | €
<ListaArgsFormales> ::= <ArgFormal> <ListaArgsFormalesResto>
<ListaArgsFormalesResto> ::= , <ArgFormal> <ListaArgsFormalesResto> | €
<ArgFormal> ::= <Tipo> idMetVar
<BloqueOpcional> ::= <Bloque> | ;
<Bloque> ::= { <ListaSentencias> }
<ListaSentencias> ::= <Sentencia> <ListaSentencias> | €
<Sentencia> ::= ;
<Sentencia> ::= <VarLocal> ;
<Sentencia> ::= <Return> ;
<Sentencia> ::= <If>
<Sentencia> ::= <While>
<Sentencia> ::= <For>
<Sentencia> ::= <Bloque>
<Sentencia> ::= <Expresion> ;
<VarLocal> ::= var idMetVar = <ExpresionCompuesta>
<Return> ::= return <ExpresionOpcional>
<ExpresionOpcional> ::= <Expresion> | €
<If> ::= if ( <Expresion> ) <Sentencia> <Else>
<Else> ::= else <Sentencia> | €
<While> ::= while ( <Expresion> ) <Sentencia>
<For> ::= for ( <ForArgs> ) <Sentencia>
<ForArgs> ::= <VarLocal> <ForInstancia> | <Expresion> <ForExpresion>
<ForExpresion> ::= ; <Expresion> ; <Expresion>
<ForInstancia> ::= <ForIterador> | <ForExpresion>
<ForIterador> ::= : idMetVar
<Expresion> ::= <ExpresionCompuesta> <ExpresionResto>
<ExpresionResto> ::= <OperadorAsignacion> <ExpresionCompuesta> | €
<OperadorAsignacion> ::= =
<ExpresionCompuesta> ::= <ExpresionBasica> <ExpresionCompuestaResto>
<ExpresionCompuestaResto> ::= ? <ExpresionCompuesta> : <ExpresionCompuesta>
<ExpresionCompuestaResto> ::= <OperadorBinario> <ExpresionBasica> <ExpresionCompuestaResto> | €
<OperadorBinario> ::= || | && | == | != | < | > | <= | >= | + | - | * | / | %
<ExpresionBasica> ::= <OperadorUnario> <Operando>
<ExpresionBasica> ::= <Operando>
<OperadorUnario> ::= + | ++ | − | −− | !
<Operando> ::= <Primitvo>
<Operando> ::= <Referencia>
<Primitivo> ::= true | false | intLiteral | charLiteral | null
<Referencia> ::= <Primario> <ReferenciaResto>
<ReferenciaResto> ::= . idMetVar <VarMetEncadenada> <ReferenciaResto> | €
<VarMetEncadenada> ::= <ArgsActuales> | €
<Primario> ::= this
<Primario> ::= stringLiteral
<Primario> ::= <LlamadaConstructor>
<Primario> ::= idMetVar <LlamadaMetOrVar>
<Primario> ::= <LlamadaMetodoEstatico>
<Primario> ::= <ExpresionParentizada>
<LlamadaConstructor> ::= new idClase <ArgsActuales>
<ExpresionParentizada> ::= ( <Expresion> )
<LlamadaMetOrVar> ::= idMetVar <ArgsActuales>
<LlamadaMetodoEstatico> ::= idClase . idMetVar <ArgsActuales>
<ArgsActuales> ::= ( <ListaExpsOpcional> )
<ListaExpsOpcional> ::= <ListaExps> | €
<ListaExps> ::= <Expresion> <ListaExpsResto>
<ListaExpsResto> ::= , <Expresion> <ListaExpsResto> | €